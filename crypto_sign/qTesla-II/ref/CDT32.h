/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP32
#define CDTSAMP32

#include <stdint.h>
#include "params.h"


// sigma = 9.73, 96-bit precision

#define CDT_ROWS 110
#define CDT_COLS 3

static const int32_t cdt_v[CDT_ROWS*CDT_COLS] = {
    0x00000000L, 0x00000000L, 0x00000000L, // 0
    0x053F8783L, 0x78DE6135L, 0x16412B5AL, // 1
    0x0FB06F27L, 0x743C9E89L, 0x059C8691L, // 2
    0x19F752BDL, 0x21757914L, 0x6AF58172L, // 3
    0x23F9A5F8L, 0x65676668L, 0x2B290419L, // 4
    0x2D9EF9B8L, 0x42F1FAE2L, 0x2EBEC2C9L, // 5
    0x36D1AD18L, 0x3CB06DACL, 0x10AC35FBL, // 6
    0x3F7F7A90L, 0x47B798D7L, 0x39436659L, // 7
    0x4799DB5CL, 0x3C854609L, 0x7AEAA69BL, // 8
    0x4F163E3FL, 0x698277F0L, 0x79BDE505L, // 9
    0x55EE119AL, 0x54E78427L, 0x0129CB99L, // 10
    0x5C1EA378L, 0x0CBE4B6CL, 0x276EF670L, // 11
    0x61A8DC95L, 0x26DE8805L, 0x0516674AL, // 12
    0x6690DD2AL, 0x1349C414L, 0x13C83A7AL, // 13
    0x6ADD8365L, 0x3719A26AL, 0x2E5504BAL, // 14
    0x6E97E40CL, 0x5F3E4043L, 0x502A23FFL, // 15
    0x71CABD8BL, 0x6285BC0BL, 0x3F0BA07DL, // 16
    0x7481ED0CL, 0x6CF4A8B5L, 0x0C0BFFABL, // 17
    0x76C9EC15L, 0x08AE2654L, 0x31DEA83FL, // 18
    0x78AF5BB4L, 0x7A2DDE63L, 0x0640AD30L, // 19
    0x7A3EA0D3L, 0x08B85D3BL, 0x075BFA78L, // 20
    0x7B83938AL, 0x271778D6L, 0x1CC92382L, // 21
    0x7C894229L, 0x31EC0FC3L, 0x1B7B88ABL, // 22
    0x7D59C729L, 0x67895551L, 0x265F0274L, // 23
    0x7DFE3080L, 0x6A9B0377L, 0x28497C39L, // 24
    0x7E7E7602L, 0x7AF8BF62L, 0x5BAD45F0L, // 25
    0x7EE17C2FL, 0x5F684E99L, 0x44F8C845L, // 26
    0x7F2D209AL, 0x27D3B863L, 0x5C480555L, // 27
    0x7F664D36L, 0x6B552137L, 0x6FBD5185L, // 28
    0x7F911011L, 0x58924729L, 0x7B2CBF5FL, // 29
    0x7FB0B54CL, 0x0CDC3AF7L, 0x1CDEAE69L, // 30
    0x7FC7E19FL, 0x59A240F0L, 0x75EA2A32L, // 31
    0x7FD8AC13L, 0x00A48D2DL, 0x590FAC4AL, // 32
    0x7FE4B5ECL, 0x48833F0BL, 0x55424ABAL, // 33
    0x7FED404BL, 0x2DCDFFB1L, 0x56274DA1L, // 34
    0x7FF33F15L, 0x27329608L, 0x57D3BB69L, // 35
    0x7FF76927L, 0x471FE786L, 0x10735496L, // 36
    0x7FFA45DFL, 0x1CBE6D75L, 0x3FA568E4L, // 37
    0x7FFC382EL, 0x47872228L, 0x7C654861L, // 38
    0x7FFD8783L, 0x4AF80118L, 0x49798F45L, // 39
    0x7FFE66CDL, 0x08C3C495L, 0x3EE2B02BL, // 40
    0x7FFEF9EBL, 0x1560713CL, 0x4C1FFE98L, // 41
    0x7FFF59D4L, 0x7843E6AEL, 0x06B843BDL, // 42
    0x7FFF97B4L, 0x47028BB3L, 0x443F422FL, // 43
    0x7FFFBF33L, 0x2803668EL, 0x0BD7C463L, // 44
    0x7FFFD825L, 0x345CB793L, 0x4ADE694EL, // 45
    0x7FFFE7BCL, 0x49C4BFFDL, 0x2200BC21L, // 46
    0x7FFFF160L, 0x60FA34ACL, 0x3BB03441L, // 47
    0x7FFFF747L, 0x09016D1EL, 0x7DC8236AL, // 48
    0x7FFFFAD9L, 0x4524F17FL, 0x77168850L, // 49
    0x7FFFFCFDL, 0x35A49790L, 0x42095FCBL, // 50
    0x7FFFFE42L, 0x1BB35624L, 0x06686AF1L, // 51
    0x7FFFFF00L, 0x5EF55746L, 0x605D6E76L, // 52
    0x7FFFFF6FL, 0x2A2A36E9L, 0x5CE4A475L, // 53
    0x7FFFFFAEL, 0x6C01E934L, 0x55038F73L, // 54
    0x7FFFFFD2L, 0x783506C9L, 0x504830B3L, // 55
    0x7FFFFFE7L, 0x1E48C4EFL, 0x13A21122L, // 56
    0x7FFFFFF2L, 0x43E914CAL, 0x2A8DF3C6L, // 57
    0x7FFFFFF8L, 0x5FD62183L, 0x119C73F4L, // 58
    0x7FFFFFFCL, 0x1172FD73L, 0x357AA4EFL, // 59
    0x7FFFFFFDL, 0x7B31F2A4L, 0x17FB523AL, // 60
    0x7FFFFFFEL, 0x77E02C50L, 0x3ACAD7F4L, // 61
    0x7FFFFFFFL, 0x39AE890CL, 0x401B179CL, // 62
    0x7FFFFFFFL, 0x5C0C94C6L, 0x1A7C4A2CL, // 63
    0x7FFFFFFFL, 0x6DCF1992L, 0x7C32FAF6L, // 64
    0x7FFFFFFFL, 0x76E3E4C9L, 0x31014F68L, // 65
    0x7FFFFFFFL, 0x7B7C26D2L, 0x7C3A65FBL, // 66
    0x7FFFFFFFL, 0x7DC90A64L, 0x2C968D8FL, // 67
    0x7FFFFFFFL, 0x7EECC48DL, 0x0EADCA35L, // 68
    0x7FFFFFFFL, 0x7F7BC44DL, 0x414A347DL, // 69
    0x7FFFFFFFL, 0x7FC1202BL, 0x781F6149L, // 70
    0x7FFFFFFFL, 0x7FE269D1L, 0x26ADEA6FL, // 71
    0x7FFFFFFFL, 0x7FF238ACL, 0x3146B8BFL, // 72
    0x7FFFFFFFL, 0x7FF9A64CL, 0x1144E7B6L, // 73
    0x7FFFFFFFL, 0x7FFD1A7CL, 0x0A441C27L, // 74
    0x7FFFFFFFL, 0x7FFEB147L, 0x6A203C49L, // 75
    0x7FFFFFFFL, 0x7FFF6A78L, 0x740E44E2L, // 76
    0x7FFFFFFFL, 0x7FFFBDE4L, 0x6F60CC76L, // 77
    0x7FFFFFFFL, 0x7FFFE313L, 0x6A4CDD29L, // 78
    0x7FFFFFFFL, 0x7FFFF37AL, 0x0F8FDB23L, // 79
    0x7FFFFFFFL, 0x7FFFFAA2L, 0x26ABB2A7L, // 80
    0x7FFFFFFFL, 0x7FFFFDB9L, 0x3E07782CL, // 81
    0x7FFFFFFFL, 0x7FFFFF0BL, 0x461AA8B5L, // 82
    0x7FFFFFFFL, 0x7FFFFF9AL, 0x3D7C8A27L, // 83
    0x7FFFFFFFL, 0x7FFFFFD6L, 0x237A3820L, // 84
    0x7FFFFFFFL, 0x7FFFFFEFL, 0x03EDD61BL, // 85
    0x7FFFFFFFL, 0x7FFFFFF9L, 0x15C32760L, // 86
    0x7FFFFFFFL, 0x7FFFFFFDL, 0x23C8A19EL, // 87
    0x7FFFFFFFL, 0x7FFFFFFEL, 0x76BE7395L, // 88
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x4A75D8B4L, // 89
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x6B55365BL, // 90
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x781AEA35L, // 91
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7D03F9B0L, // 92
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7EE22EECL, // 93
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7F9630C9L, // 94
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FD93CB0L, // 95
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FF1F27AL, // 96
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFAF55DL, // 97
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFE35CCL, // 98
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFF5F06L, // 99
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFC809L, // 100
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFECBFL, // 101
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFF972L, // 102
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFDCAL, // 103
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFF43L, // 104
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFC2L, // 105
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFEBL, // 106
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFF9L, // 107
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFEL, // 108
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, // 109
}; // cdt_v

// memory requirements:
//     2048 samples: 34528 bytes
//     1024 samples: 18144 bytes
//      512 samples:  9952 bytes
//      256 samples:  5856 bytes
//      128 samples:  3808 bytes
//       64 samples:  2784 bytes
//       32 samples:  2272 bytes
// table alone: 1320 bytes

#endif // CDTSAMP32
