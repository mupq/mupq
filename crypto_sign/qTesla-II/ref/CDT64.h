/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP64
#define CDTSAMP64

#include <stdint.h>
#include "params.h"


// sigma = 9.73, 128-bit precision

#define CDT_ROWS 128
#define CDT_COLS 2

static const int64_t cdt_v[CDT_ROWS*CDT_COLS] = {
    0x0000000000000000LL, 0x0000000000000000LL, // 0
    0x053F8783F1BCC26ALL, 0x2C8256B55956D3F0LL, // 1
    0x0FB06F27E8793D12LL, 0x0B390D2299F8107BLL, // 2
    0x19F752BD42EAF229LL, 0x55EB02E5081A81CDLL, // 3
    0x23F9A5F8CACECCD0LL, 0x5652083390CF571DLL, // 4
    0x2D9EF9B885E3F5C4LL, 0x5D7D85922C626F5ELL, // 5
    0x36D1AD187960DB58LL, 0x21586BF6D240C70BLL, // 6
    0x3F7F7A908F6F31AELL, 0x7286CCB1E840EF86LL, // 7
    0x4799DB5C790A8C13LL, 0x75D54D36836F2D67LL, // 8
    0x4F163E3FD304EFE1LL, 0x737BCA0B4E8BF89FLL, // 9
    0x55EE119AA9CF084ELL, 0x025397333FAB3CBALL, // 10
    0x5C1EA378197C96D8LL, 0x4EDDECE180A42136LL, // 11
    0x61A8DC954DBD100ALL, 0x0A2CCE9595784F53LL, // 12
    0x6690DD2A26938828LL, 0x279074F3FDB6CDB3LL, // 13
    0x6ADD83656E3344D4LL, 0x5CAA09752AC5ABC9LL, // 14
    0x6E97E40CBE7C8087LL, 0x205447FE16CD6333LL, // 15
    0x71CABD8BC50B7816LL, 0x7E1740F9B41098E2LL, // 16
    0x7481ED0CD9E9516ALL, 0x1817FF560220CD22LL, // 17
    0x76C9EC15115C4CA8LL, 0x63BD507DA80E89CCLL, // 18
    0x78AF5BB4F45BBCC6LL, 0x0C815A60DA853631LL, // 19
    0x7A3EA0D31170BA76LL, 0x0EB7F4F13655A6FBLL, // 20
    0x7B83938A4E2EF1ACLL, 0x399247057DDBCA44LL, // 21
    0x7C89422963D81F86LL, 0x36F71155D08CB843LL, // 22
    0x7D59C729CF12AAA2LL, 0x4CBE04E97E92B19DLL, // 23
    0x7DFE3080D53606EELL, 0x5092F8720124C7D4LL, // 24
    0x7E7E7602F5F17EC5LL, 0x375A8BE07C0DDA4DLL, // 25
    0x7EE17C2FBED09D33LL, 0x09F1908A84E1CF8FLL, // 26
    0x7F2D209A4FA770C7LL, 0x38900AAAF5F9A451LL, // 27
    0x7F664D36D6AA426FLL, 0x5F7AA30A8265EB77LL, // 28
    0x7F911011B1248E53LL, 0x76597EBE68BD40C9LL, // 29
    0x7FB0B54C19B875EELL, 0x39BD5CD354EE5A6ELL, // 30
    0x7FC7E19FB34481E1LL, 0x6BD45463F0BE7BE3LL, // 31
    0x7FD8AC1301491A5BLL, 0x321F5893AB04FF19LL, // 32
    0x7FE4B5EC91067E17LL, 0x2A8495751D4B1AABLL, // 33
    0x7FED404B5B9BFF63LL, 0x2C4E9B4276587381LL, // 34
    0x7FF33F154E652C11LL, 0x2FA776D21C782F07LL, // 35
    0x7FF769278E3FCF0CLL, 0x20E6A92CB9F5D79BLL, // 36
    0x7FFA45DF397CDAEALL, 0x7F4AD1C8781E7BBCLL, // 37
    0x7FFC382E8F0E4451LL, 0x78CA90C35E733A1ALL, // 38
    0x7FFD878395F00231LL, 0x12F31E89E30DEC77LL, // 39
    0x7FFE66CD1187892ALL, 0x7DC56057157E3090LL, // 40
    0x7FFEF9EB2AC0E279LL, 0x183FFD315E847CAALL, // 41
    0x7FFF59D4F087CD5CLL, 0x0D70877A27F5FDABLL, // 42
    0x7FFF97B48E051767LL, 0x087E845E148D007FLL, // 43
    0x7FFFBF335006CD1CLL, 0x17AF88C5E1ACCDFFLL, // 44
    0x7FFFD82568B96F27LL, 0x15BCD29C38B25634LL, // 45
    0x7FFFE7BC93897FFALL, 0x4401784306380CFDLL, // 46
    0x7FFFF160C1F46958LL, 0x77606881D627BDF4LL, // 47
    0x7FFFF7471202DA3DLL, 0x7B9046D40614159DLL, // 48
    0x7FFFFAD98A49E2FFLL, 0x6E2D109FC1557B53LL, // 49
    0x7FFFFCFD6B492F21LL, 0x0412BF96DB1B7463LL, // 50
    0x7FFFFE423766AC48LL, 0x0CD0D5E1CC1FA27BLL, // 51
    0x7FFFFF00BDEAAE8DLL, 0x40BADCEC17FE83BDLL, // 52
    0x7FFFFF6F54546DD3LL, 0x39C948EB24F3EFABLL, // 53
    0x7FFFFFAED803D269LL, 0x2A071EE64E506759LL, // 54
    0x7FFFFFD2F06A0D93LL, 0x20906165FDB39D8ALL, // 55
    0x7FFFFFE73C9189DELL, 0x274422458B60FFF4LL, // 56
    0x7FFFFFF287D22994LL, 0x551BE78C9B78AC35LL, // 57
    0x7FFFFFF8BFAC4306LL, 0x2338E7E9003958F1LL, // 58
    0x7FFFFFFC22E5FAE6LL, 0x6AF549DE87725947LL, // 59
    0x7FFFFFFDF663E548LL, 0x2FF6A473D54A6347LL, // 60
    0x7FFFFFFEEFC058A0LL, 0x7595AFE8858D4385LL, // 61
    0x7FFFFFFF735D1219LL, 0x00362F37DF604B6CLL, // 62
    0x7FFFFFFFB819298CLL, 0x34F89457E64346BDLL, // 63
    0x7FFFFFFFDB9E3325LL, 0x7865F5EC123A61F7LL, // 64
    0x7FFFFFFFEDC7C992LL, 0x62029ECFFA75F27DLL, // 65
    0x7FFFFFFFF6F84DA5LL, 0x7874CBF6FF19777ELL, // 66
    0x7FFFFFFFFB9214C8LL, 0x592D1B1DD7974DDFLL, // 67
    0x7FFFFFFFFDD9891ALL, 0x1D5B94699AE20219LL, // 68
    0x7FFFFFFFFEF7889BLL, 0x029468F9C66DFD5BLL, // 69
    0x7FFFFFFFFF824057LL, 0x703EC292942DC01BLL, // 70
    0x7FFFFFFFFFC4D3A2LL, 0x4D5BD4DE52242CF0LL, // 71
    0x7FFFFFFFFFE47158LL, 0x628D717EE74A50A9LL, // 72
    0x7FFFFFFFFFF34C98LL, 0x2289CF6C08719A42LL, // 73
    0x7FFFFFFFFFFA34F8LL, 0x1488384F7C829E73LL, // 74
    0x7FFFFFFFFFFD628FLL, 0x54407892D7C25553LL, // 75
    0x7FFFFFFFFFFED4F1LL, 0x681C89C498DFD51BLL, // 76
    0x7FFFFFFFFFFF7BC9LL, 0x5EC198ED072980AFLL, // 77
    0x7FFFFFFFFFFFC627LL, 0x5499BA537A284988LL, // 78
    0x7FFFFFFFFFFFE6F4LL, 0x1F1FB645D514DBAFLL, // 79
    0x7FFFFFFFFFFFF544LL, 0x4D57654E6E3C5EB2LL, // 80
    0x7FFFFFFFFFFFFB72LL, 0x7C0EF0596152B050LL, // 81
    0x7FFFFFFFFFFFFE17LL, 0x0C35516A444FDB75LL, // 82
    0x7FFFFFFFFFFFFF34LL, 0x7AF9144DA032EC44LL, // 83
    0x7FFFFFFFFFFFFFACLL, 0x46F470408E3C99D5LL, // 84
    0x7FFFFFFFFFFFFFDELL, 0x07DBAC36C8C27C6ELL, // 85
    0x7FFFFFFFFFFFFFF2LL, 0x2B864EBFEE51C7ACLL, // 86
    0x7FFFFFFFFFFFFFFALL, 0x4791433D4B53B9F7LL, // 87
    0x7FFFFFFFFFFFFFFDLL, 0x6D7CE72AE588392DLL, // 88
    0x7FFFFFFFFFFFFFFFLL, 0x14EBB169591CA96ELL, // 89
    0x7FFFFFFFFFFFFFFFLL, 0x56AA6CB76F1FF8EALL, // 90
    0x7FFFFFFFFFFFFFFFLL, 0x7035D469E2762DB6LL, // 91
    0x7FFFFFFFFFFFFFFFLL, 0x7A07F36092D4813BLL, // 92
    0x7FFFFFFFFFFFFFFFLL, 0x7DC45DD7D5FC9174LL, // 93
    0x7FFFFFFFFFFFFFFFLL, 0x7F2C61929E057DEBLL, // 94
    0x7FFFFFFFFFFFFFFFLL, 0x7FB2796070E645A4LL, // 95
    0x7FFFFFFFFFFFFFFFLL, 0x7FE3E4F45497E0FELL, // 96
    0x7FFFFFFFFFFFFFFFLL, 0x7FF5EAB9B5A831E3LL, // 97
    0x7FFFFFFFFFFFFFFFLL, 0x7FFC6B982D299F9BLL, // 98
    0x7FFFFFFFFFFFFFFFLL, 0x7FFEBE0BE2FB2117LL, // 99
    0x7FFFFFFFFFFFFFFFLL, 0x7FFF9011B122960DLL, // 100
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFD97DD036938CLL, // 101
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFF2E3C10FED53LL, // 102
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFB9544D33C26LL, // 103
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFE8706487125LL, // 104
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFF83A16269BFLL, // 105
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFD76589A799LL, // 106
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFF2E1E1D984LL, // 107
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFBCE6B04E4LL, // 108
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFEAC5C14AELL, // 109
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFF95AC0C94LL, // 110
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFDF0F72DELL, // 111
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFF5E6EC29LL, // 112
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFCEFCB1DLL, // 113
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFF149672LL, // 114
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFBA11B0LL, // 115
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFEB7187LL, // 116
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFA053ALL, // 117
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFE475FLL, // 118
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFF827ELL, // 119
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFDC9FLL, // 120
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFF622LL, // 121
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFD47LL, // 122
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFF41LL, // 123
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFCCLL, // 124
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFF2LL, // 125
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFCLL, // 126
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, // 127
}; // cdt_v

// memory requirements:
//     2048 samples: 52224 bytes
//     1024 samples: 27648 bytes
//      512 samples: 15360 bytes
//      256 samples:  9216 bytes
//      128 samples:  6144 bytes
//       64 samples:  4608 bytes
//       32 samples:  3840 bytes
// table alone: 2048 bytes

#endif // CDTSAMP64
