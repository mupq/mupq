/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP
#define CDTSAMP

#include <stdint.h>
#include "params.h"


// Sigma = 10.2, 128-bit precision

#define CDT_ROWS 135
#define CDT_COLS 2

static const int64_t cdt_v[CDT_ROWS*CDT_COLS] = {
    0x0000000000000000LL, 0x0000000000000000LL, // 0
    0x05019F2342B5510CLL, 0x4CD7B09465894A2CLL, // 1
    0x0EF8936E477F8F22LL, 0x6363208540D46A81LL, // 2
    0x18CB03FC0E8D84ADLL, 0x00E045D0CD3E52EBLL, // 3
    0x2261C15E8A4F57E3LL, 0x799EC88203BDB518LL, // 4
    0x2BA749FE946E30ACLL, 0x7459532F454F2C2BLL, // 5
    0x3488598A086B65AFLL, 0x1BB3215C39D0A702LL, // 6
    0x3CF45E2203C37E93LL, 0x19FEB5DC9AB8A030LL, // 7
    0x44DDCECBB7D63DB2LL, 0x57AF2F7EA464B594LL, // 8
    0x4C3A608E45EF7B2BLL, 0x775EBC95847A28B9LL, // 9
    0x530319A45556D18ALL, 0x26B73633F467FE8CLL, // 10
    0x59344411DF74E917LL, 0x0813BEE3DB0A930ALL, // 11
    0x5ECD42A3244B1CD9LL, 0x6157B17ECFE35BE0LL, // 12
    0x63D04CBC960744B4LL, 0x2F1275FA0144B4F2LL, // 13
    0x684216614F39B7E7LL, 0x4976731B80EF6949LL, // 14
    0x6C296A64B1A8024BLL, 0x3ABC64091652340BLL, // 15
    0x6F8EBCDC597936D8LL, 0x0F1B7A484454DD08LL, // 16
    0x727BBBA2C8C9C903LL, 0x580749493EEFD963LL, // 17
    0x74FAE22164C29C97LL, 0x16732C4B4A136721LL, // 18
    0x771714BEC9BCF02FLL, 0x375FE580E9D6C097LL, // 19
    0x78DB474CC920D694LL, 0x6D82BA3526AA83EFLL, // 20
    0x7A5230BF426B2FE4LL, 0x7D989CF77FF88728LL, // 21
    0x7B860D681BA2F584LL, 0x699C522E4F437856LL, // 22
    0x7C806FFEE0D1DF7BLL, 0x4077BA0090A490A4LL, // 23
    0x7D4A20E95AB78E37LL, 0x0E1EC99D8C4A7EBCLL, // 24
    0x7DEB0A96014CA039LL, 0x188C3427E432AE17LL, // 25
    0x7E6A3144EB926484LL, 0x2C046AE21ADC442CLL, // 26
    0x7ECDB456CC34FC6ALL, 0x2C5CAA35D76E76A6LL, // 27
    0x7F1AD71F40A2D63FLL, 0x3FE015C50F7FC951LL, // 28
    0x7F560F416601BCF9LL, 0x171E0F3370F915D2LL, // 29
    0x7F8316C3244DD5B7LL, 0x23A1C16361C2526BLL, // 30
    0x7FA5003C6307FD2DLL, 0x2D4602BB51C738A5LL, // 31
    0x7FBE4BCB46FF7D10LL, 0x0C249EC26261DF42LL, // 32
    0x7FD0FBBE92014AF6LL, 0x24634E5085C4F545LL, // 33
    0x7FDEA82D84C8D138LL, 0x1217AA56D6CFBD62LL, // 34
    0x7FE890F4FE84F8B2LL, 0x7FD4EF4FDAD73B12LL, // 35
    0x7FEFADC946A8C3E5LL, 0x6CA61FCF162BFB58LL, // 36
    0x7FF4BC398FAC532CLL, 0x1018095D55E3A474LL, // 37
    0x7FF84BA5893D5909LL, 0x07B04DF406BF3C54LL, // 38
    0x7FFAC73ED164E46ELL, 0x2065C7F38F7B589FLL, // 39
    0x7FFC7E40D9B9C723LL, 0x69A58DC15BD0E7E9LL, // 40
    0x7FFDAA935414AF3FLL, 0x1C7FAC7155551F42LL, // 41
    0x7FFE760EFA1B4632LL, 0x095D3D1B1FE2D091LL, // 42
    0x7FFEFE9C01CDE231LL, 0x36258D378C114612LL, // 43
    0x7FFF595E2652C4B5LL, 0x71198F3F86DCB271LL, // 44
    0x7FFF951CF928EAB7LL, 0x7E20A9BF5F5B8D45LL, // 45
    0x7FFFBC111AC7BB32LL, 0x2DC3BDDB7E91FF5ALL, // 46
    0x7FFFD538ADF927F1LL, 0x17EDEA3B9747D0BBLL, // 47
    0x7FFFE54F4DA4A32DLL, 0x15EA26E9E8FC8135LL, // 48
    0x7FFFEF804B8F1257LL, 0x3F806D6F58F4BBD5LL, // 49
    0x7FFFF5E52EF2F773LL, 0x15DA110757D1C239LL, // 50
    0x7FFFF9DE58F6B091LL, 0x478FFA13C511566FLL, // 51
    0x7FFFFC505E46D85ALL, 0x096716BB9F80C4D8LL, // 52
    0x7FFFFDCDF8B91533LL, 0x0EF00E80F333EE23LL, // 53
    0x7FFFFEB45C3C9422LL, 0x6CD593F8BE7A21EELL, // 54
    0x7FFFFF3E1FD7A8DFLL, 0x57839D0BCBC1A79BLL, // 55
    0x7FFFFF8FB6DC913CLL, 0x50EA31255B1E02D3LL, // 56
    0x7FFFFFBF92BD3CBFLL, 0x7D543596D46C217DLL, // 57
    0x7FFFFFDB60AEC0F6LL, 0x51C7094571495A81LL, // 58
    0x7FFFFFEB606B8B46LL, 0x2B4F156E3F19C33DLL, // 59
    0x7FFFFFF47E9B0F01LL, 0x4DAA1A678ED72BFFLL, // 60
    0x7FFFFFF9A425B9C5LL, 0x59A08BAA1F779478LL, // 61
    0x7FFFFFFC84B9D150LL, 0x05E8C6F3A5010504LL, // 62
    0x7FFFFFFE1C9328FELL, 0x1C0FD4EAED636FA9LL, // 63
    0x7FFFFFFEFC3E6136LL, 0x5E0EF14EB463A258LL, // 64
    0x7FFFFFFF75BB9523LL, 0x3449872B5BA5C39ELL, // 65
    0x7FFFFFFFB71712D3LL, 0x67A0B22765E70756LL, // 66
    0x7FFFFFFFD9EA002DLL, 0x12E1D7FFECBE1D81LL, // 67
    0x7FFFFFFFEC4AA4B8LL, 0x15EF12504972F1F7LL, // 68
    0x7FFFFFFFF5E5A897LL, 0x0C33EF66C62BDBF0LL, // 69
    0x7FFFFFFFFADEA35ELL, 0x31A71BA3CF1D60A2LL, // 70
    0x7FFFFFFFFD6B542CLL, 0x416291768F655BDFLL, // 71
    0x7FFFFFFFFEB6C791LL, 0x7BB655B09DCFAA60LL, // 72
    0x7FFFFFFFFF5D7CCFLL, 0x45027FDFCCB6FCEELL, // 73
    0x7FFFFFFFFFB0889ELL, 0x5C0644ED6CABE864LL, // 74
    0x7FFFFFFFFFD981F5LL, 0x2BF1A6C61FDE91C2LL, // 75
    0x7FFFFFFFFFED87C4LL, 0x619F982C8554100CLL, // 76
    0x7FFFFFFFFFF738A1LL, 0x3F77B9A4198D4D96LL, // 77
    0x7FFFFFFFFFFBDDDELL, 0x1AB54B65D5BBE028LL, // 78
    0x7FFFFFFFFFFE127ELL, 0x15DF5397C6E179A5LL, // 79
    0x7FFFFFFFFFFF1C00LL, 0x13E6C9ECD285EB63LL, // 80
    0x7FFFFFFFFFFF97A8LL, 0x39AA274972C789A6LL, // 81
    0x7FFFFFFFFFFFD0B3LL, 0x0008D359D4C2B8B3LL, // 82
    0x7FFFFFFFFFFFEAC2LL, 0x3F1317B61209848ALL, // 83
    0x7FFFFFFFFFFFF68DLL, 0x2D2F2EFDF11E97EFLL, // 84
    0x7FFFFFFFFFFFFBD6LL, 0x298F5A37B7F38D6ALL, // 85
    0x7FFFFFFFFFFFFE2ELL, 0x71E53C005619309ALL, // 86
    0x7FFFFFFFFFFFFF36LL, 0x760A7A8B9F413F15LL, // 87
    0x7FFFFFFFFFFFFFA9LL, 0x720C138B7A5B60FFLL, // 88
    0x7FFFFFFFFFFFFFDBLL, 0x3C9BAB8FF63CE22ALL, // 89
    0x7FFFFFFFFFFFFFF0LL, 0x5380B2C6191784F6LL, // 90
    0x7FFFFFFFFFFFFFF9LL, 0x4E5E4A10FF2D7097LL, // 91
    0x7FFFFFFFFFFFFFFDLL, 0x2EEAF427CFC2DF3ALL, // 92
    0x7FFFFFFFFFFFFFFELL, 0x7658E743AE8AD400LL, // 93
    0x7FFFFFFFFFFFFFFFLL, 0x4851C6714099C670LL, // 94
    0x7FFFFFFFFFFFFFFFLL, 0x69B0BF5176794C05LL, // 95
    0x7FFFFFFFFFFFFFFFLL, 0x77255600113257E8LL, // 96
    0x7FFFFFFFFFFFFFFFLL, 0x7C84EEFFC1569297LL, // 97
    0x7FFFFFFFFFFFFFFFLL, 0x7EA5062E79846C97LL, // 98
    0x7FFFFFFFFFFFFFFFLL, 0x7F7A2B7D64797F46LL, // 99
    0x7FFFFFFFFFFFFFFFLL, 0x7FCCDECD3B50B2D5LL, // 100
    0x7FFFFFFFFFFFFFFFLL, 0x7FECA6AEF047D605LL, // 101
    0x7FFFFFFFFFFFFFFFLL, 0x7FF8BF4C4E9CB132LL, // 102
    0x7FFFFFFFFFFFFFFFLL, 0x7FFD4EA2021F85CBLL, // 103
    0x7FFFFFFFFFFFFFFFLL, 0x7FFF0279A258D215LL, // 104
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFA3A59C429024LL, // 105
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFDEAD58449050LL, // 106
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFF4172C0D3BC9LL, // 107
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFBC8B320D44DLL, // 108
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFE858C7E6F1BLL, // 109
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFF7C8EC707B0LL, // 110
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFD2C808E82DLL, // 111
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFF097771644LL, // 112
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFACCA80019LL, // 113
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFE42EB0C08LL, // 114
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFF6C9E38D1LL, // 115
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFCFA9113BLL, // 116
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFF04BBB22LL, // 117
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFAF256BCLL, // 118
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFE63AD0BLL, // 119
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFF7DD4A1LL, // 120
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFD74BECLL, // 121
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFF364A9LL, // 122
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFC21ECLL, // 123
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFED327LL, // 124
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFA574LL, // 125
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFE502LL, // 126
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFF807LL, // 127
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFDABLL, // 128
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFF53LL, // 129
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFCELL, // 130
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFF1LL, // 131
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFCLL, // 132
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFELL, // 133
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, // 134
}; // cdt_v

// memory requirements:
//     2048 samples: 43660 bytes
//     1024 samples: 23180 bytes
//      512 samples: 12940 bytes
//      256 samples:  7820 bytes
//      128 samples:  5260 bytes
//       64 samples:  3980 bytes
//       32 samples:  3340 bytes
// table alone: 2160 bytes

#endif 